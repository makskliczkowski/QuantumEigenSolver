[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "QES"
dynamic = ["version"]
description = "Quantum Eigen Solver: Comprehensive framework for quantum eigenvalue problem solving"
readme = "README.md"
license = {text = "CC-BY-4.0"}
authors = [
    {name = "Maksymilian Kliczkowski", email = "maksymilian.kliczkowski@pwr.edu.pl"}
]
maintainers = [
    {name = "Maksymilian Kliczkowski", email = "maksymilian.kliczkowski@pwr.edu.pl"}
]
keywords = ["quantum", "physics", "eigenvalue", "solver", "monte carlo", "variational", "neural networks", "jax"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Natural Language :: English",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.20.0",
    "scipy>=1.7.0",
    "matplotlib>=3.3.0",
    "pandas>=1.3.0",
    "sympy>=1.8",
    "tqdm>=4.60.0",
    "requests>=2.25.0",
    "numba>=0.55.0",
    "setuptools>=45",
    "seaborn>=0.11.0",
    "psutil>=5.8.0",
]

[project.optional-dependencies]
jax = [
    "jax>=0.4.0",
    "jaxlib>=0.4.0",
    "flax>=0.6.0",
    "optax>=0.1.0",
]
ml = [
    "scikit-learn>=1.0.0",
    "scikit-image>=0.18.0",
]
hdf5 = [
    "h5py>=3.1.0",
]
dev = [
    "pytest>=6.0.0",
    "pytest-cov>=2.12.0",
    "black>=21.0.0",
    "flake8>=3.9.0",
    "mypy>=0.910",
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=0.5.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=0.5.0",
    "nbsphinx>=0.8.0",
    "pandoc>=1.12.0",
]
all = [
    "jax>=0.4.0",
    "jaxlib>=0.4.0",
    "flax>=0.6.0",
    "optax>=0.1.0",
    "scikit-learn>=1.0.0",
    "scikit-image>=0.18.0",
    "h5py>=3.1.0",
    "pytest>=6.0.0",
    "pytest-cov>=2.12.0",
    "black>=21.0.0",
    "flake8>=3.9.0",
    "mypy>=0.910",
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=0.5.0",
    "nbsphinx>=0.8.0",
    "pandoc>=1.12.0",
]

[project.urls]
Homepage = "https://github.com/makskliczkowski/QuantumEigenSolver"
Documentation = "https://github.com/makskliczkowski/QuantumEigenSolver/wiki"
Repository = "https://github.com/makskliczkowski/QuantumEigenSolver"
"Bug Tracker" = "https://github.com/makskliczkowski/QuantumEigenSolver/issues"

[tool.setuptools]
packages = ["QES"]
include-package-data = true

[tool.setuptools.package-data]
QES = ["*.md", "*.txt", "*.rst", "log/*", "general_python/tests/data/*"]

[tool.setuptools_scm]
write_to = "QES/_version.py"

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
    "general_python/tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["QES"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
